AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy reference architecture for Lenses on AWS.
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VPC
          - Subnets
      - Label:
          default: Lenses
        Parameters:
          - InstanceType
          - KeyName
          - SSHLocation
          - PrivateSubnetID
          - LensesLicense
          - LensesPort
          - LensesLocation
      - Label:
          default: Kafka (autodiscover)
        Parameters:
          - AutoRegion
          - AutoBroker
          - AutoZookeeper
          - AutoWorker
      - Label:
          default: Kafka (manually)
        Parameters:
          - BrokerURLs
          - ZookeeperURLs
          - SchemaRegistryURLs
          - ConnectURLs

    ParameterLabels:
      PrivateSubnetID:
        default: Private Subnet
      LensesLicense:
        default: License (JSON)
      LensesPort:
        default: Port
      AutoRegion:
        default: Region of Kafka
      AutoBroker:
        default: Brokers (optional)
      AutoZookeeper:
        default: Zookeeper (optional)
      AutoWorker:
        default: Worker (optional)
      BrokerURLs:
        default: Kafka Brokers
      ZookeeperURLs:
        default: Zookeeper JSON (optional)
      SchemaRegistryURLs:
        default: Schema Registry JSON
      ConnectURLs:
        default: Connect JSON
      Subnets:
        default: Subnets of ELB  

Mappings:
  RegionMap:
    ap-northeast-1:
      ubuntu: ami-07ad4b1c3af1ea214
    ap-northeast-2:
      ubuntu: ami-06e7b9c5e0c4dd014
    ap-southeast-1:
      ubuntu: ami-0c5199d385b432989
    ap-southeast-2:
      ubuntu: ami-07a3bd4944eb120a0
    ca-central-1:
      ubuntu: ami-0427e8367e3770df1
    eu-central-1:
      ubuntu: ami-0bdf93799014acdc4
    eu-west-1:
      ubuntu: ami-00035f41c82244dab
    eu-west-2:
      ubuntu: ami-0b0a60c0a2bd40612
    us-east-1:
      ubuntu: ami-0ac019f4fcb7cb7e6
    us-east-2:
      ubuntu: ami-0f65671a86f061fcd
    us-west-1:
      ubuntu: ami-063aa838bd7631e0b
    us-west-2:
      ubuntu: ami-0bbe6b35405ecebd

Parameters:
  KeyName:
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance"
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription : "Can contain only ASCII characters."

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  LensesLocation:
    Description: The IP address range that can be used to access to Lenses
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  VPC:
    Type: AWS::EC2::VPC::Id
    Description: The VPC that the reference architecture will be deployed to.

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Choose only public Subnets which will be used for ELB.
   
  PrivateSubnetID:
    Type: AWS::EC2::Subnet::Id
    Description: Choose the private Subnet which will be used for ELB.
  
  InstanceType:
    Type: String
    Default: t2.medium
    AllowedValues:
    - t2.medium
    - t2.large
    - t2.xlarge
    - t3.medium
    - t3.large
    - t3.xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - m4.16xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - m5.4xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    - c5.4xlarge
    - c5.9xlarge
    - r4.large
    - r4.xlarge
    - r4.2xlarge
    - r4.4xlarge
    - r4.8xlarge
    - r4.16xlarge
    Description: Lenses EC2 instance type

  LensesLicense:
    Description: You can get a license here https://www.landoop.com/downloads/. Please use the JSON file here.
    Type: String
    NoEcho: "true"
  
  LensesPort:
    Type: Number
    Default: 9991
    Description: The port which Lenses will use to start. Default is 9991

  AutoRegion:
    Type: String
    Default: eu-west-1
    Description: The region where your Apache Kafka is deployed.

  AutoBroker:
    Type: String
    Default: broker
    Description: The Tag Name you used for your brokers. Default value is broker

  AutoZookeeper:
    Type: String
    Default: zookeeper
    Description: Tag Name you used for your Zookeeper. Default value is zookeeper

  AutoWorker:
    Type: String
    Default: worker
    Description: Tag Name you used for your Workers (Connect, Schema Registry). Default value is worker

  BrokerURLs:
    Description: >-
     Kafka Brokers (comma-separated list) eg. PLAINTEXT://broker.1.url:9092,PLAINTEXT://broker.2.url:9092. Ignore it if you use Broker EC2 instances
    Type: String

  ZookeeperURLs:
    Type: String
    Description: >-
      Zookeeper JSON. Check documentation https://docs.lenses.io/install_setup/configuration/lenses-config.html

  SchemaRegistryURLs:
    Type: String
    Description: >-
      Schema registry JSON. Check documentation https://docs.lenses.io/install_setup/configuration/lenses-config.html

  ConnectURLs:
    Type: String
    Description: >-
      Connect JSON. https://docs.lenses.io/install_setup/configuration/lenses-config.html

Rules:
  Subnets:
    Assertions:
      - Assert:
          'Fn::EachMemberIn':
            - 'Fn::ValueOfAll':
                - 'AWS::EC2::Subnet::Id'
                - VpcId
            - 'Fn::RefAll': 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets must in the VPC

Resources:
  # Setup NAT for Elastic IP of EC2 instance.
  EIP:
    Type: AWS::EC2::EIP
    Properties:
        Domain: vpc
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Select [ "0", !Ref Subnets ]
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  PrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetID

  # Setup EC2 Instance
  LensesSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupDescription : "Enable HTTP and SSH access For Lenses"
        VpcId: !Ref VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref LensesLocation

  Lenses:
    Type: AWS::EC2::Instance
    Properties: 
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        - DeviceName: /dev/sdf
          Ebs:
            DeleteOnTermination: false
            VolumeSize: 10
      ImageId:
        Fn::FindInMap:
          - RegionMap
          - Ref: AWS::Region
          - ubuntu
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref IAMProfile
      SecurityGroupIds:
        - !GetAtt "LensesSecurityGroup.GroupId"
      SubnetId: !Ref PrivateSubnetID
      Tags: 
        - Key: "Name"
          Value: !Ref AWS::StackName
      UserData:
        Fn::Base64: 
          Fn::Sub: |
            #!/bin/bash
            set -o errexit

            curl https://archive.landoop.com/repository/cloud/aws/docker/configure.sh -O
            chmod +x configure.sh
            ./configure.sh -r ${AWS::Region} \
             -g '${CloudWatchLogsGroup}' \
             -l '${LensesLicense}' \
             -p ${LensesPort} \
             -b '${BrokerURLs}' \
             -z '${ZookeeperURLs}' \
             -c '${ConnectURLs}' \
             -s '${SchemaRegistryURLs}' \
             -a '${AutoBroker}' \
             -d '${AutoZookeeper}' \
             -w '${AutoWorker}'

  # Gather Logs from Cloudwatch with the stack group name
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
        LogGroupName: !Ref AWS::StackName

  # Load Balancer
  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        # Allow access to ALB from anywhere on the internet
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1

  LoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: !Sub LB-${AWS::StackName}
        Subnets: !Ref Subnets
        SecurityGroups: 
          - !Ref PublicLoadBalancerSG

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP 
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1
      Conditions:
          - Field: path-pattern
            Values: 
              - "*"
      Actions:
          - TargetGroupArn: !Ref TargetGroup
            Type: forward

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
        VpcId: !Ref VPC
        Port: 80
        Protocol: HTTP
        HealthCheckIntervalSeconds: 60
        HealthCheckPath: /
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 40
        HealthyThresholdCount: 2
        UnhealthyThresholdCount: 2
        TargetType: instance
        Targets:
          - Id: !Ref Lenses

  IAMProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role
      InstanceProfileName: !Sub ${AWS::StackName}-ec2-iam-profile

  EC2Role: 
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub EC2-${AWS::StackName}
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: EC2-LensesRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                # Rules which allow ECS to attach network interfaces to instances
                # on your behalf in order for awsvpc networking mode to work right
                - 'ec2:AttachNetworkInterface'
                - 'ec2:CreateNetworkInterface'
                - 'ec2:CreateNetworkInterfacePermission'
                - 'ec2:DeleteNetworkInterface'
                - 'ec2:DeleteNetworkInterfacePermission'
                - 'ec2:Describe*'
                - 'ec2:DetachNetworkInterface'

                # Rules which allow ECS to update load balancers on your behalf
                # with the information about how to send traffic to your containers
                - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                - 'elasticloadbalancing:DeregisterTargets'
                - 'elasticloadbalancing:Describe*'
                - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                - 'elasticloadbalancing:RegisterTargets'
              Resource: '*'

Outputs:
  FQDN:
    Description: "FQDN for Elastic Load Balancer"
    Value: !GetAtt LoadBalancer.DNSName
