AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy reference architecture for Lenses on AWS.
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VPC
          - Subnets
      - Label:
          default: Lenses
        Parameters:
          - InstanceType
          - KeyName
          - SSHLocation
          - PrivateSubnetID
          - LensesLicense
          - LensesPort
      - Label:
          default: Kafka (autodiscover)
        Parameters:
          - AutoRegion
          - AutoBroker
          - AutoZookeeper
          - AutoWorker
      - Label:
          default: Kafka (manually)
        Parameters:
          - BrokerURLs
          - ZookeeperURLs
          - SchemaRegistryURLs
          - ConnectURLs

    ParameterLabels:
      PrivateSubnetID:
        default: Private Subnet
      LensesLicense:
        default: License (JSON)
      LensesPort:
        default: Port
      AutoRegion:
        default: Region of Kafka
      AutoBroker:
        default: Brokers (optional)
      AutoZookeeper:
        default: Zookeeper (optional)
      AutoWorker:
        default: Worker (optional)
      BrokerURLs:
        default: Kafka Brokers
      ZookeeperURLs:
        default: Zookeeper JSON (optional)
      SchemaRegistryURLs:
        default: Schema Registry JSON
      ConnectURLs:
        default: Connect JSON 
      Subnets:
        default: Subnets of ELB  

Mappings:
  RegionMap:
    ap-northeast-1:
      ubuntu: ami-07ad4b1c3af1ea214
    ap-northeast-2:
      ubuntu: ami-06e7b9c5e0c4dd014
    ap-southeast-1:
      ubuntu: ami-0c5199d385b432989
    ap-southeast-2:
      ubuntu: ami-07a3bd4944eb120a0
    ca-central-1:
      ubuntu: ami-0427e8367e3770df1
    eu-central-1:
      ubuntu: ami-0bdf93799014acdc4
    eu-west-1:
      ubuntu: ami-00035f41c82244dab
    eu-west-2:
      ubuntu: ami-0b0a60c0a2bd40612
    us-east-1:
      ubuntu: ami-0ac019f4fcb7cb7e6
    us-east-2:
      ubuntu: ami-0f65671a86f061fcd
    us-west-1:
      ubuntu: ami-063aa838bd7631e0b
    us-west-2:
      ubuntu: ami-0bbe6b35405ecebd

Parameters:
  KeyName:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance"
    ConstraintDescription : "Can contain only ASCII characters."

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  VPC:
    Type: AWS::EC2::VPC::Id
    Description: The VPC that the reference architecture will be deployed to.
   
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Choose only public Subnets which will be used for ELB.
   
  PrivateSubnetID:
    Type: AWS::EC2::Subnet::Id
    Description: Choose the private Subnet which will be used for ELB.
  
  InstanceType:
    Type: String
    Default: t2.medium
    AllowedValues:
    - t2.medium
    - t2.large
    - t2.xlarge
    - t3.medium
    - t3.large
    - t3.xlarge
    Description: Lenses EC2 instance type

  LensesLicense:
    Description: You can get a license here https://www.landoop.com/downloads/. Please use the JSON file here.
    Type: String
    NoEcho: "true"
  
  LensesPort:
    Type: Number
    Default: 9991
    Description: The port which Lenses will use to start. Default is 9991
  
  AutoRegion:
    Type: String
    Default: eu-west-1
    Description: The region where your Apache Kafka is deployed.

  AutoBroker:
    Type: String
    Default: broker
    Description: The Tag Name you used for your brokers. Default value is broker

  AutoZookeeper:
    Type: String
    Default: zookeeper
    Description: Tag Name you used for your Zookeeper. Default value is zookeeper

  AutoWorker:
    Type: String
    Default: worker
    Description: Tag Name you used for your Workers (Connect, Schema Registry). Default value is worker

  BrokerURLs:
    Description: >-
      Apache Kafka Broker URLs (comma-separated list) eg. PLAINTEXT://broker.1.url:9092,PLAINTEXT://broker.2.url:9092. Ignore it if you use Broker EC2 instances
    Type: String

  ZookeeperURLs:
    Type: String
    Description: >-
      Zookeeper JSON. Check documentation https://docs.lenses.io/install_setup/configuration/lenses-config.html

  SchemaRegistryURLs:
    Type: String
    Description: >-
      Schema registry JSON. Check documentation https://docs.lenses.io/install_setup/configuration/lenses-config.html

  ConnectURLs:
    Description: >-
      Connect JSON. https://docs.lenses.io/install_setup/configuration/lenses-config.html
    Type: String

Rules:
  Subnets:
    Assertions:
      - Assert:
          'Fn::EachMemberIn':
            - 'Fn::ValueOfAll':
                - 'AWS::EC2::Subnet::Id'
                - VpcId
            - 'Fn::RefAll': 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets must in the VPC

Resources:
  # Setup NAT for Elastic IP of EC2 instance.
  EIP:
    Type: AWS::EC2::EIP
    Properties:
        Domain: vpc
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Select [ "0", !Ref Subnets ]
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  PrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetID

  # Setup EC2 Instance
  LensesSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupDescription : "Enable HTTP and SSH access For Lenses"
        VpcId: !Ref VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  Lenses:
    Type: AWS::EC2::Instance
    Properties: 
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        - DeviceName: /dev/sdf
          Ebs:
            DeleteOnTermination: false
            VolumeSize: 10
      ImageId:
        Fn::FindInMap:
          - RegionMap
          - Ref: AWS::Region
          - ubuntu
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref IAMProfile
      SecurityGroupIds:
        - !GetAtt "LensesSecurityGroup.GroupId"
      SubnetId: !Ref PrivateSubnetID
      Tags: 
        - Key: "Name"
          Value: !Ref AWS::StackName
      UserData:
        Fn::Base64: 
          Fn::Sub: |
            #!/bin/bash
            set -o errexit

            mkfs -t ext4 /dev/xvdf
            mkdir -p /mnt/persistent 
            mount /dev/xvdf /mnt/persistent
            echo "/dev/xvdf /mnt/persistent ext4 defaults,relatime,nofail 0 2" >> /etc/fstab

            apt-get -y update
            apt-get -y install \
              apt-transport-https \
              ca-certificates \
              curl \
              software-properties-common
            
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            apt-key fingerprint 0EBFCD88
            add-apt-repository \
              "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
              $(lsb_release -cs) \
              stable" 

            apt-get -y update
            apt-get -y install docker-ce python
            mkdir -p /mnt/persistent/lenses/

            cat << EOF > /mnt/persistent/lenses/lenses.env
            LENSES_PORT=${LensesPort}
            LENSES_SECURITY_MODE=BASIC
            LENSES_SECURITY_GROUPS=[{"name": "adminGroup", "roles": ["admin", "write", "read"]},{"name": "readGroup",  "roles": ["read"]},{"name": "datapolicyreadGroup",  "roles": ["datapolicyread"]},{"name": "datapolicywritegroup",  "roles": ["datapolicywrite"]}]
            LENSES_SECURITY_USERS=[{"username": "admin", "password": "admin", "displayname": "Lenses Admin", "groups": ["adminGroup", "datapolicywritegroup"]},{"username": "read", "password": "read", "displayname": "Read Only", "groups": ["readGroup"]},{"username": "datapolicyread", "password": "datapolicyread", "displayname": "datapolicyread", "groups": ["datapolicyreadGroup"]},{"username": "datapolicywrite", "password": "datapolicywrite", "displayname": "datapolicywrite", "groups": ["datapolicywritegroup"]}]
            LICENSE=${LensesLicense}
            LENSES_KAFKA_BROKERS=${BrokerURLs}
            LENSES_ZOOKEEPER_HOSTS=${ZookeeperURLs}
            LENSES_SCHEMA_REGISTRY_URLS=${SchemaRegistryURLs}
            LENSES_CONNECT_CLUSTERS=${ConnectURLs}

            SD_CONFIG=provider=aws region=${AutoRegion} addr_type=public_v4
            SD_BROKER_FILTER=tag_key=Name tag_value=*${AutoBroker}*
            SD_ZOOKEEPER_FILTER=tag_key=Name tag_value=*${AutoZookeeper}*
            SD_REGISTRY_FILTER=tag_key=Name tag_value=*${AutoWorker}*
            SD_CONNECT_FILTERS=tag_key=Name tag_value=*${AutoWorker}*
            EOF
            
            docker run --name=lenses --env-file=/mnt/persistent/lenses/lenses.env -p 80:${LensesPort} -v /var/log/lenses:/data/log -v /mnt/persistent/kafka-streams-state:/data/kafka-streams-state -d landoop/lenses:2.2
            
            # Setup AWS Logs
            cd /tmp 
            mkdir /tmp/cwlogs
            cat << EOF > /tmp/cwlogs/lenses.conf
            [general]
            state_file= /var/awslogs/agent-state
            [/mnt/persistent/lenses/logs/lenses]
            file = /mnt/persistent/lenses/logs/lenses.log
            log_group_name = ${CloudWatchLogsGroup}
            log_stream_name = {instance_id}/lenses.log

            [/mnt/persistent/lenses/logs/lenses-warn]
            file = /mnt/persistent/lenses/logs/lenses-warn.log
            log_group_name = ${CloudWatchLogsGroup}
            log_stream_name = {instance_id}/lenses-warn.log

            [/mnt/persistent/lenses/logs/lenses-metrics]
            file = /mnt/persistent/lenses/logs/metrics.log
            log_group_name = ${CloudWatchLogsGroup}
            log_stream_name = {instance_id}/lenses-metrics.log
            EOF

            curl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O
            python awslogs-agent-setup.py -n -r ${AWS::Region} -c /tmp/cwlogs/lenses.conf || error_exit 'Failed to run CloudWatch Logs agent setup'

  # Gather Logs from Cloudwatch with the stack group name
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
        LogGroupName: !Ref AWS::StackName

  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1

  LoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: !Sub LB-${AWS::StackName}
        Subnets: !Ref Subnets
        SecurityGroups: 
          - !Ref PublicLoadBalancerSG

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP 
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
    
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1
      Conditions:
          - Field: path-pattern
            Values: 
              - "*"
      Actions:
          - TargetGroupArn: !Ref TargetGroup
            Type: forward

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
        VpcId: !Ref VPC
        Port: 80
        Protocol: HTTP
        HealthCheckIntervalSeconds: 60
        HealthCheckPath: /
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 40
        HealthyThresholdCount: 2
        UnhealthyThresholdCount: 2
        TargetType: instance
        Targets:
          - Id: !Ref Lenses

  IAMProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: /
      Roles:
        - !Ref EC2Role
      InstanceProfileName: !Sub ${AWS::StackName}-ec2-iam-profile

  EC2Role: 
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub EC2-${AWS::StackName}
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: EC2-LensesRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                # Rules which allow ECS to attach network interfaces to instances
                # on your behalf in order for awsvpc networking mode to work right
                - 'ec2:AttachNetworkInterface'
                - 'ec2:CreateNetworkInterface'
                - 'ec2:CreateNetworkInterfacePermission'
                - 'ec2:DeleteNetworkInterface'
                - 'ec2:DeleteNetworkInterfacePermission'
                - 'ec2:Describe*'
                - 'ec2:DetachNetworkInterface'

                # Rules which allow ECS to update load balancers on your behalf
                # with the information about how to send traffic to your containers
                - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                - 'elasticloadbalancing:DeregisterTargets'
                - 'elasticloadbalancing:Describe*'
                - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                - 'elasticloadbalancing:RegisterTargets'
              Resource: '*'

Outputs:
  FQDN:
    Description: "FQDN for Elastic Load Balancer"
    Value: !GetAtt LoadBalancer.DNSName