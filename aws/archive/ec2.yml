AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy Lenses on AWS EC2 instance.
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VPC
          - SubnetId
      - Label:
          default: Lenses
        Parameters:
          - InstanceType
          - KeyName
          - SSHLocation
          - LensesLicense
          - LensesPort
      - Label:
          default:  Kafka (manually)
        Parameters:
          - BrokerURLs
          - ZookeeperURLs
          - SchemaRegistryURLs
          - ConnectURLs
          
    ParameterLabels:
      LensesLicense:
        default: License (JSON)
      LensesPort:
        default: Port
      BrokerURLs:
        default: Kafka Brokers
      ZookeeperURLs:
        default: Zookeeper JSON (optional)
      SchemaRegistryURLs:
        default: Schema Registry JSON
      ConnectURLs:
        default: Connect JSON
      SubnetId:
        default: Subnet ID of VPC   
Parameters:
  KeyName:
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance"
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription : "Can contain only ASCII characters."

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  VPC:
    Description: The VPC that the ECS cluster is deployed to
    Type: AWS::EC2::VPC::Id
  
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: SubnetId of an existing subnet (for the primary network) in your
      Virtual Private Cloud (VPC)
    ConstraintDescription: must be an existing subnet in the selected Virtual Private
      Cloud.
  
  InstanceType:
    Type: String
    Default: t2.medium
    AllowedValues:
    - t2.medium
    - t2.large
    - t2.xlarge
    - t3.medium
    - t3.large
    - t3.xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - m4.16xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - m5.4xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    - c5.4xlarge
    - c5.9xlarge
    - r4.large
    - r4.xlarge
    - r4.2xlarge
    - r4.4xlarge
    - r4.8xlarge
    - r4.16xlarge
    Description: Lenses EC2 instance type
      
  LensesLicense:
    Description: You can get a license here https://www.landoop.com/downloads/. Please use the JSON file here.
    Type: String
    NoEcho: "true"
  
  LensesPort:
    Type: Number
    Default: 9991
    Description: The port which Lenses will use to start. Default is 9991
 
  BrokerURLs:
    Description: >-
      Apache Kafka Broker URLs (comma-separated list) eg. PLAINTEXT://broker.1.url:9092,PLAINTEXT://broker.2.url:9092. Ignore it if you use Broker EC2 instances
    Type: String

  ZookeeperURLs:
    Type: String
    Description: >-
      Zookeeper JSON. Check documentation https://docs.lenses.io/install_setup/configuration/lenses-config.html

  SchemaRegistryURLs:
    Type: String
    Description: >-
      Schema registry JSON. Check documentation https://docs.lenses.io/install_setup/configuration/lenses-config.html

  ConnectURLs:
    Type: String
    Description: >-
      Connect JSON. https://docs.lenses.io/install_setup/configuration/lenses-config.html

Mappings:
  RegionMap:
    ap-northeast-1:
      ubuntu: ami-07ad4b1c3af1ea214
    ap-northeast-2:
      ubuntu: ami-06e7b9c5e0c4dd014
    ap-southeast-1:
      ubuntu: ami-0c5199d385b432989
    ap-southeast-2:
      ubuntu: ami-07a3bd4944eb120a0
    ca-central-1:
      ubuntu: ami-0427e8367e3770df1
    eu-central-1:
      ubuntu: ami-0bdf93799014acdc4
    eu-west-1:
      ubuntu: ami-00035f41c82244dab
    eu-west-2:
      ubuntu: ami-0b0a60c0a2bd40612
    us-east-1:
      ubuntu: ami-0ac019f4fcb7cb7e6
    us-east-2:
      ubuntu: ami-0f65671a86f061fcd
    us-west-1:
      ubuntu: ami-063aa838bd7631e0b
    us-west-2:
      ubuntu: ami-0bbe6b35405ecebd
      
Resources:
  Lenses:
    Type: AWS::EC2::Instance
    Properties: 
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        - DeviceName: /dev/sdf
          Ebs:
            DeleteOnTermination: false
            VolumeSize: 10
      ImageId:
        Fn::FindInMap:
          - RegionMap
          - Ref: AWS::Region
          - ubuntu
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref IAMProfile
      SecurityGroupIds:
        - !GetAtt "LensesSecurityGroup.GroupId"
      SubnetId: !Ref SubnetId
      Tags: 
        - Key: "Name"
          Value: !Ref AWS::StackName
      UserData:
        Fn::Base64: 
          Fn::Sub: |
            #!/bin/bash
            set -o errexit

            mkfs -t ext4 /dev/xvdf
            mkdir -p /mnt/persistent 
            mount /dev/xvdf /mnt/persistent
            echo "/dev/xvdf /mnt/persistent ext4 defaults,relatime,nofail 0 2" >> /etc/fstab

            apt-get -y update
            apt-get -y install python

            curl https://archive.landoop.com/lenses/2.2/lenses-2.2.3-linux64.tar.gz -O
            cp lenses-2.2.3-linux64.tar.gz /mnt
            cd /mnt
            tar xvzf lenses-2.2.3-linux64.tar.gz
            chmod -R 0755 lenses
            rm -f lenses-2.2.3-linux64.tar.gz

            # Setup Lenses conf
            cat << EOF > /mnt/lenses/lenses.conf
            lenses.port=${LensesPort}

            lenses.kafka.brokers="${BrokerURLs}"
            
            lenses.secret.file=security.conf
            lenses.sql.state.dir="/mnt/persistent/kafka-streams-state"
            lenses.storage.directory="/mnt/persistent/storage"
            lenses.license.file=license.json
            EOF

            if [ ! -z "${ZookeeperURLs}" ]; then
              echo lenses.zookeeper.hosts='${ZookeeperURLs}' >> /mnt/lenses/lenses.conf
            fi

            if [ ! -z "${SchemaRegistryURLs}" ]; then
              echo lenses.schema.registry.urls='${SchemaRegistryURLs}' >> /mnt/lenses/lenses.conf
            fi

            if [ ! -z "${ConnectURLs}" ]; then
              echo lenses.connect.clusters='${ConnectURLs}' >> /mnt/lenses/lenses.conf
            fi

            # Setup Security conf
            cat << EOF > /mnt/lenses/security.conf
            lenses.security.mode=BASIC
            lenses.security.users=[
              {"username": "admin", "password": "admin", "displayname": "Lenses Admin", "groups": ["adminGroup", "datapolicywritegroup"]},
              {"username": "read", "password": "read", "displayname": "Read Only", "groups": ["readGroup"]},
              {"username": "datapolicyread", "password": "datapolicyread", "displayname": "datapolicyread", "groups": ["datapolicyreadGroup"]},
              {"username": "datapolicywrite", "password": "datapolicywrite", "displayname": "datapolicywrite", "groups": ["datapolicywritegroup"]}
            ]

            lenses.security.groups=[
              {"name": "adminGroup", "roles": ["admin", "write", "read"]},
              {"name": "readGroup",  "roles": ["read"]},
              {"name": "datapolicyreadGroup",  "roles": ["datapolicyread"]},
              {"name": "datapolicywritegroup",  "roles": ["datapolicywrite"]}
            ]
            EOF

            cat << EOF > /mnt/lenses/license.json
            ${LensesLicense}
            EOF
            
            cd lenses && ./bin/lenses &
            
            # Setup AWS Logs
            cd /tmp 
            mkdir /tmp/cwlogs
            cat << EOF > /tmp/cwlogs/lenses.conf
            [general]
            state_file= /var/awslogs/agent-state
            [/mnt/lenses/logs/lenses]
            file = /mnt/lenses/logs/lenses.log
            log_group_name = ${CloudWatchLogsGroup}
            log_stream_name = {instance_id}/lenses.log

            [/mnt/lenses/logs/lenses-warn]
            file = /mnt/lenses/logs/lenses-warn.log
            log_group_name = ${CloudWatchLogsGroup}
            log_stream_name = {instance_id}/lenses-warn.log

            [/mnt/lenses/logs/lenses-metrics]
            file = /mnt/lenses/logs/metrics.log
            log_group_name = ${CloudWatchLogsGroup}
            log_stream_name = {instance_id}/lenses-metrics.log
            EOF

            curl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O
            python awslogs-agent-setup.py -n -r ${AWS::Region} -c /tmp/cwlogs/lenses.conf || error_exit 'Failed to run CloudWatch Logs agent setup'


  # Gather Logs from Cloudwatch with the stack group name
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
        LogGroupName: !Ref AWS::StackName

  LensesSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupDescription : "Enable HTTP and SSH access For Lenses"
        VpcId: !Ref VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: !Ref LensesPort
          ToPort: !Ref LensesPort
          CidrIp: 0.0.0.0/0

  IAMProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: /
      Roles:
        - !Ref EC2Role
      InstanceProfileName: !Sub ec2-iam-profile-${AWS::StackName}

  EC2Role: 
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub EC2-${AWS::StackName}
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: EC2-LensesRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'

Outputs:
  FQDN:
    Description: "FQDN for EC2 instance"
    Value: !GetAtt Lenses.PublicDnsName