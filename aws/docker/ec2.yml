AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy Lenses on AWS Fargate, hosted in a private subnet, but accessible via a public load balancer.
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VPC
          - SubnetId
      - Label:
          default: Lenses
        Parameters:
          - InstanceType
          - KeyName
          - SSHLocation
          - LensesLicense
          - LensesPort
      - Label:
          default: Kafka (autodiscover)
        Parameters:
          - AutoRegion
          - AutoBroker
          - AutoZookeeper
          - AutoWorker
      - Label:
          default:  Kafka (manually)
        Parameters:
          - BrokerURLs
          - ZookeeperURLs
          - SchemaRegistryURLs
          - ConnectURLs
          
    ParameterLabels:
      LensesLicense:
        default: License (JSON)
      LensesPort:
        default: Port
      AutoRegion:
        default: Region of Kafka
      AutoBroker:
        default: Brokers (optional)
      AutoZookeeper:
        default: Zookeeper (optional)
      AutoWorker:
        default: Worker (optional)
      BrokerURLs:
        default: Broker URLs
      ZookeeperURLs:
        default: Zookeeper URLs
      SchemaRegistryURLs:
        default: Schema Registry URLs
      ConnectURLs:
        default: Connect JSON URLs   
      SubnetId:
        default: Subnet ID of VPC   
Parameters:
  KeyName:
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance"
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription : "Can contain only ASCII characters."

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  VPC:
    Description: The VPC that the ECS cluster is deployed to
    Type: AWS::EC2::VPC::Id
  
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: SubnetId of an existing subnet (for the primary network) in your
      Virtual Private Cloud (VPC)
    ConstraintDescription: must be an existing subnet in the selected Virtual Private
      Cloud.
  
  InstanceType:
    Type: String
    Default: t2.medium
    AllowedValues:
    - t2.medium
    - t2.large
    - t2.xlarge
    - t3.medium
    - t3.large
    - t3.xlarge
    Description: Lenses EC2 instance type
      
  LensesLicense:
    Description: You can get a license here https://www.landoop.com/downloads/. Please use the JSON file here.
    Type: String
    NoEcho: "true"
  
  LensesPort:
    Type: Number
    Default: 9991
    Description: The port which Lenses will use to start. Default is 9991

  AutoRegion:
    Type: String
    Default: eu-west-1
    Description: The region where your Apache Kafka is deployed.

  AutoBroker:
    Type: String
    Default: broker
    Description: The Tag Name you used for your brokers. Default value is broker

  AutoZookeeper:
    Type: String
    Default: zookeeper
    Description: Tag Name you used for your Zookeeper. Default value is zookeeper

  AutoWorker:
    Type: String
    Default: worker
    Description: Tag Name you used for your Workers (Connect, Schema Registry). Default value is worker
 
  BrokerURLs:
    Description: >-
      Apache Kafka Broker URLs (comma-separated list) eg. PLAINTEXT://broker.1.url:9092,PLAINTEXT://broker.2.url:9092. Ignore it if you use Broker EC2 instances
    Type: String

  ZookeeperURLs:
    Type: String
    Description: >-
      Zookeeper URLs (comma-separated list) eg. http://zookeeper.1.url,http://zookeeper.2.url. Ignore it if you use Zookeper EC2 instances

  SchemaRegistryURLs:
    Type: String
    Description: >-
      Schema registry URLs (comma-separated list) eg. http://schema.registry.2.url,http://schema.registry.2.url. Ignore it if you use Schema Registry EC2 instances

  ConnectURLs:
    Description: >-
      Connect URLs (comma-separated list)  eg. http://connect.2.url,http://connect.2.url. Ignore it if you use Connect EC2 instances
    Type: String

Mappings:
  RegionMap:
    ap-northeast-1:
      ubuntu: ami-07ad4b1c3af1ea214
    ap-northeast-2:
      ubuntu: ami-06e7b9c5e0c4dd014
    ap-southeast-1:
      ubuntu: ami-0c5199d385b432989
    ap-southeast-2:
      ubuntu: ami-07a3bd4944eb120a0
    ca-central-1:
      ubuntu: ami-0427e8367e3770df1
    eu-central-1:
      ubuntu: ami-0bdf93799014acdc4
    eu-west-1:
      ubuntu: ami-00035f41c82244dab
    eu-west-2:
      ubuntu: ami-0b0a60c0a2bd40612
    us-east-1:
      ubuntu: ami-0ac019f4fcb7cb7e6
    us-east-2:
      ubuntu: ami-0f65671a86f061fcd
    us-west-1:
      ubuntu: ami-063aa838bd7631e0b
    us-west-2:
      ubuntu: ami-0bbe6b35405ecebd
      
Resources:
  Lenses:
    Type: AWS::EC2::Instance
    Properties: 
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        - DeviceName: /dev/sdf
          Ebs:
            DeleteOnTermination: false
            VolumeSize: 10
      ImageId:
        Fn::FindInMap:
          - RegionMap
          - Ref: AWS::Region
          - ubuntu
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref IAMProfile
      SecurityGroupIds:
        - !GetAtt "LensesSecurityGroup.GroupId"
      SubnetId: !Ref SubnetId
      Tags: 
        - Key: "Name"
          Value: !Ref AWS::StackName
      UserData:
        Fn::Base64: 
          Fn::Sub: |
            #!/bin/bash
            set -o errexit

            mkfs -t ext4 /dev/xvdf
            mkdir -p /mnt/persistent 
            mount /dev/xvdf /mnt/persistent
            echo "/dev/xvdf /mnt/persistent ext4 defaults,relatime,nofail 0 2" >> /etc/fstab

            apt-get -y update
            apt-get -y install \
              apt-transport-https \
              ca-certificates \
              curl \
              software-properties-common
            
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            apt-key fingerprint 0EBFCD88
            add-apt-repository \
              "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
              $(lsb_release -cs) \
              stable" 

            apt-get -y update
            apt-get -y install docker-ce python
            mkdir -p /mnt/persistent/lenses/

            cat << EOF > /mnt/persistent/lenses/lenses.env
            LENSES_PORT=${LensesPort}
            LENSES_SECURITY_MODE=BASIC
            LENSES_SECURITY_GROUPS=[{"name": "adminGroup", "roles": ["admin", "write", "read"]},{"name": "readGroup",  "roles": ["read"]}]
            LENSES_SECURITY_USERS=[{"username": "admin", "password": "admin", "displayname": "Lenses Admin", "groups": ["adminGroup"]},{"username": "read", "password": "read", "displayname": "Read Only", "groups": ["readGroup"]}]
            LICENSE=${LensesLicense}
            LENSES_KAFKA_BROKERS=${BrokerURLs}
            LENSES_ZOOKEEPER_HOSTS=${ZookeeperURLs}
            LENSES_SCHEMA_REGISTRY_URLS=${SchemaRegistryURLs}
            LENSES_CONNECT_CLUSTERS=${ConnectURLs}

            SD_CONFIG=provider=aws region=${AutoRegion} addr_type=public_v4
            SD_BROKER_FILTER=tag_key=Name tag_value=*${AutoBroker}*
            SD_ZOOKEEPER_FILTER=tag_key=Name tag_value=*${AutoZookeeper}*
            SD_REGISTRY_FILTER=tag_key=Name tag_value=*${AutoWorker}*
            SD_CONNECT_FILTERS=tag_key=Name tag_value=*${AutoWorker}*
            EOF
            
            docker run --name=lenses --env-file=/mnt/persistent/lenses/lenses.env -p 80:${LensesPort} -v /var/log/lenses:/data/log -v /mnt/persistent/kafka-streams-state:/data/kafka-streams-state -d landoop/lenses
            
            mkdir /tmp/cwlogs
            cat << EOF > /tmp/cwlogs/lenses.conf
            [general]
            state_file= /var/awslogs/agent-state
            [/var/log/lenses/lenses]
            file = /var/log/lenses/lenses.log
            log_group_name = ${CloudWatchLogsGroup}
            log_stream_name = {instance_id}/lenses.log
            [/var/log/lenses/lenses-warn]
            file = /var/log/lenses/lenses-warn.log
            log_group_name = ${CloudWatchLogsGroup}
            log_stream_name = {instance_id}/lenses-warn.log
            [/var/log/lenses/lenses-metrics]
            file = /var/log/lenses/metrics.log
            log_group_name = ${CloudWatchLogsGroup}
            log_stream_name = {instance_id}/lenses-metrics.log
            EOF

            curl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O
            python awslogs-agent-setup.py -n -r ${AWS::Region} -c /tmp/cwlogs/lenses.conf || error_exit 'Failed to run CloudWatch Logs agent setup'


  # Gather Logs from Cloudwatch with the stack group name
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
        LogGroupName: !Ref AWS::StackName

  LensesSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupDescription : "Enable HTTP and SSH access For Lenses"
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  IAMProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: /
      Roles:
        - !Ref EC2Role
      InstanceProfileName: "lenses-ec2-iam-profile"

  EC2Role: 
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2-Lenses
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: EC2TaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Lenses auto discover
                - "ec2:DescribeInstances"
                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'